# 39. Combination Sum

public IList<IList<int>> res =  new List<IList<int>>();

public IList<IList<int>> CombinationSum(int[] candidates, int target){
    // Recursive approach 
    RecursiveDp(candidates, candidates.Length, target, new List<int>());
    // Recursive Backtracking
    RecursiveBacktracking(candidates, 0, target, new List<int>());
    return res;
}

## Recursive Dp
private void RecursiveDp(
    int[] candidates, 
    int length, int target, 
    IList<int> curr)
{
    
    if (target == 0){
        res.Add(curr.ToList());
        return;
    }

    if (length <= 0 || target <= 0) return;

    RecursiveDp(candidates, length, 
            target - candidates[length - 1], 
            curr.Append(candidates[length - 1]).ToList());
    RecursiveDp(candidates, length -1, target, curr);
}


## Recursive Backtracking
private void RecursiveBacktracking(
    int[] candidates, int start, 
    int target, IList<int> curr)
{
    if (target < 0) return;

    if (target == 0) res.Add(curr.ToList());
    else {
        for (int i = start ; i < candidates.Length; i++){
            curr.Add(candidates[i]);

            RecursiveBacktracking(candidates, i, target - candidates[i], curr);

            curr.Remove(curr.LastOrDefault());
        }
    }
}

